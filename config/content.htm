<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>fqpabi8</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323152">https://github.com/mdecp2024/hw-41323152</a></p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-41323152">https://mdecp2024.github.io/hw-41323152</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><span>加入Brython介面</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sMdiwDY_IhM" width="560"></iframe></span></p>
<p></p>
<p></p>
<p></p>
<p><span>編寫 print 與 for 迴圈相關程式</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0um2ChX_yqE" width="560"></iframe></p>
<p></p>
<p><span>使用可攜程式維護作業網站</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ssl5Y_xp7cc" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<p><span>熟悉 ShareX 拍攝電腦操作流程影片</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fkXiEP6zj10" width="560"></iframe></p>
<p></p>
<p></p>
<h3>w10</h3>
<p><span>題目一:</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jXY4EoEcrNY" width="560"></iframe></p>
<p>題目二:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/JXw1TA44CEA" width="560"></iframe></p>
<p>題目三:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6fwaRnAPkRU" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>第一題(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/f992fe4f474bf3767bf43d547988cee0/raw/f4aec130c4a67a480504033ef8c88f5b4b8f7f36/hw1.py">"*"畫出空心圓</a>)</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L8w2Apruz8Q" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

size = 10  # 設定字元區域的大小為 10x10
radius = 3.5 # 設定半徑為 3.5
center = 3.5  # 圓心位置設為 (3.5, 3.5)

for y in range(size):
    for x in range(size):
        # 計算每個點到圓心的距離
        distance = math.sqrt((x - center) ** 2 + (y - center) ** 2)
        
        # 判斷該點是否在圓的邊緣附近
        if radius - 0.5 &lt; distance &lt; radius + 0.5:
            print("＊", end="")  # 使用全形字符 "＊"
        else:
            print("　", end="")  # 使用全形空格
    print()
</pre>
<p><span><img alt="" height="235" src="/images/螢幕擷取畫面 2024-11-28 152724.png" width="218"/></span></p>
<p><span></span></p>
<p><span>心得:上次是做金字塔，這次我嘗試做空心圓，雖然程式我不是自己全部自己寫，但我還是有了解一些一步步學習。下一次可以挑戰更高難度的圖形形狀。</span></p>
<p>第二題(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/f992fe4f474bf3767bf43d547988cee0/raw/e8bd6b051a7d58696a2e48271581255e507d5ca4/hw2.py">黑色方塊畫圓</a>)</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ucbUah3yxc0" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立畫布超檔案物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每格的像素數
gs = 20  # 每格的大小是 20 像素

# gs*tc = 畫布寬高
ctx = canvas.getContext("2d")

# 畫矩形的函數
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

# 繪製網格的函數
def grid(width, height, grid_pix):
    # 繪製 10x10 網格，每格大小為 grid_pix
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

# 填充單個方塊的函數
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)  # x 和 y 乘以 gs 以調整位置

# 繪製空心圓的函數
def draw_hollow_circle(cx, cy, radius):
    for x in range(10):
        for y in range(10):
            # 計算每個格子到圓心的距離
            distance = ((x - cx) ** 2 + (y - cy) ** 2) ** 0.5
            # 判斷這個格子是否在圓的邊緣範圍內 (半徑邊界)
            if radius - 0.5 &lt;= distance &lt;= radius + 0.5:
                fill(x, y, "black")  # 填充黑色，顯示圓形的邊界

# 清除畫布
ctx.clearRect(0, 0, canvas.width, canvas.height)

# 繪製網格 (10x10 網格，每格 20x20 像素)
grid(10, 10, gs)

# 繪製空心圓，圓心在 (5, 5) 位置，半徑為 3 格 (60 像素)
draw_hollow_circle(5, 5, 3)  # 3格半徑
</pre>
<p><span><img alt="" height="297" src="/images/螢幕擷取畫面 2024-11-28 152953.png" width="301"/></span></p>
<p><span></span></p>
<p><span></span></p>
<p><span>心得:已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</span><span>可以用任何指令做出圖形下次要挑戰更高難度的試試看，我想做做看台灣國旗。</span></p>
<h3>w12_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/be34db032a63928b67a7772eee8d8bf55eac093e/hw.py">我已學會for和print迴圈</a>:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/h4Ih0ZzoCn8" width="560"></iframe></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for i in range(1, 6):
    print(f"{i}. 我很棒")</pre>
<p>心得:我已了解pythoh最基礎的for與print迴圈，雖然這很簡單，但這在python是最常用的指令。</p>
<p></p>
<p></p>
<p>筆記:</p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/2b847a5252a2f478df563f6ce69f794f87092179/1.py">題目一</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">"this is a string"
'everything you write in between quotes is a string'
help("input")
input("What's your name?")
input("Where are you from?")
print (" /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("  / \    ")
print (" (___)___")
help("print")</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/4cb814e56589cbdc40bec24630ec198aa52be97b/2.py">題目二</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Fernando"
last_name  = "Pérez"
print (first_name)
print (last_name)
name = input("What's your name?")
favorite_food = input ("What is your favorite food?")
print ("Hi! My name is " + name)
print ("My favorite food is " + favorite_food) 
print (name + "'s favorite food is " + favorite_food)</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/0e2754976f00347dcdd8fa10963a3bbf724dd02b/3.py">題目三</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"]
print (programming_books)
wanted_book = input("Hi! What book would you like to buy?")
print (wanted_book)
if wanted_book in programming_books:
    print ("Yes, we sell it!")
else:
    print ("Sorry, we don't sell that book")</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/13284ffbf793e357c1eca166b2a82e229e8e54b5/4.py">題目四</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"]
print (shopping_list)
new_item = input("What else do I have to buy?")
 
if new_item in shopping_list:
    print (new_item + " is/are already in the shopping list")
    print (shopping_list) 
else:
    shopping_list.append(new_item)
    print (shopping_list)
     
item_to_remove = input("What do I have to remove?")
 
if item_to_remove in shopping_list:
    shopping_list.remove(item_to_remove)
    print (shopping_list)
else:
    print (item_to_remove + " is/are not in the list")
    print (shopping_list)</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/45a09096181e33e0cbfa3c59f58c04025939838c/5.py">題目五</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"]
print(todays_menu)
side_dish_index = todays_menu.index("salad")
print(side_dish_index)
todays_menu.pop(side_dish_index)
print(todays_menu)
todays_menu.insert(side_dish_index, "fries")  # 修正變數名稱
print(todays_menu)</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/06392949440dca9e98dd1873ee3f7a04e334b5c5/6.py">題目六</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities)
print(cities[1])
print(cities[1:4])
print(cities[1:4:2])
print(cities[0:3])
print(cities[:3])
print(cities[2:5])
print(cities[2:])
print(cities[0:5:2])
print(cities[4])
print(cities[-1])
print(cities[-4:-1])
print(cities[3:0:-1])
print(cities[-2:-5:-1])
print(cities[::-1])</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/f97e19584a838daf9acfe01b365894f12459e3b4/7.py">題目七</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">senses = ["eyes", "nose", "ears", "tongue", "skin"]
print (senses)
senses[1] = "smell"
print (senses)
senses[3:5] = ["taste", "touch"]
print (senses)
senses[0:3:2] = ["sight", "hearing"]
print (senses)
planets = ["Mercury", "Mars", "Earth", "Neptune"]
print (planets)
planets = planets + ["Jupiter"]
print (planets)
planets = planets[0:2] + ["Venus"] + planets[2:5]
print (planets)
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
print(planets)
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print (house)
del house[1]
print (house)
del house[4:6]
print (house)
del house[::2]
print (house)
del house</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/95620d5fce29c836a4b26b6dd265be725bd46acf/8.py">題目八</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">friends = ["Geetha", "Luca", "Daisy", "Juhan"]
dishes  = ["sushi", "burgers", "tacos", "pizza"]
print ("My friends' names are:")
print (friends)
for index in range (0,4):
    print ("index:  " + str(index))
    print ("friend: " + friends[index])
print ("Their favorite dishes are:")
print (dishes)
for index in range (0,4):
    print ("index:  " + str(index))
    print ("dish: " + dishes[index])
for index in range (0,4):
    print ("My friend " + friends[index] + "'s favorite dish is " + dishes[index])</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/bd1f609e3266ace155fcfb443587d4472ed8c838/9.py">題目九</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">animals = ["giraffe", "penguin", "dolphin"]
print (animals)
# for each position in the list
for i in range (0, len(animals)):
    print ("-- Beginning of loop --")
    # print each element and its position
    print ("The element in position " + str(i) + " is " + animals[i])
wanted_to_see = "penguin"
# for each position in the list
for i in range (0, len(animals)):
    # if the current animal is what you really wanted to see
    if animals[i] == wanted_to_see:
        # print out that that's the animal you really wanted to see
        print ("I saw a " + animals[i] + " and I really wanted to see it!")
    # if the current animal is not what you really wanted to see
    else:
        # just print out that you saw it
        print ("I saw a " + animals[i])</pre>
<p></p>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6227fdf720f711d830dd780682f73ff7/raw/8bb2c7780f338183874f8284bc626fdfe08e62f2/10.py">題目十</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print (accessories)
# for each position in the list
for i in range (len(accessories)):
    #print each elements and its position
    print ("The element "  + accessories[i] + " is in position " + str(i))
# for each position in the list
for i in range (len(accessories)):
    # if the length of the element equals 6
    if len(accessories[i]) == 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
# for each position in the list
for i in range (len(accessories)):
    # if the length of the element is less than 6
    if len(accessories[i]) &lt; 6:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")  
# defining the threshold
n_of_characters = 6
# for each position in the list 
for i in range (len(accessories)):
    # if the length of the element is greater than the threshold
    if len(accessories[i]) &gt; n_of_characters:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
# defining the threshold
n_of_characters = 6
# for each position in the list 
for i in range (len(accessories)):
    # if the length of the element is not equal to the threshold
    if len(accessories[i]) != n_of_characters:
        # print the element, its position, and its number of characters
        print ("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
# defining the threshold
position = 2
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is less then or equal to to the threshold
    if i &lt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
# defining the threshold
position = 2
# for each position in the list 
for i in range (len(accessories)):
    # if the position of the element is greater then or equal to to the threshold
    if i &gt;= position:
        # print the element, its position, and its position characteristic
        print ("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))
</pre>
<p></p><h3>w13_hw</h3>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6ad6c5f65bec710ae68562eda7f2801b/raw/dad0a05c2e9dc9930aa7523fb603dd02eb257804/hw1.py">劃出一條直線和兩個正方形以及外接圓</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設置畫布
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()

# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()</pre>
<!-- 引入 Brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
</p>
<!-- 設置容器 -->
<div id="brython div1"></div>
<div><a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/6ad6c5f65bec710ae68562eda7f2801b/raw/6751466ba419b17088b27b4f9bbec2f9985a1cb5/hw2.py">圖形上色</a></div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 設置畫布
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 3

# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()


# 設置混色模式為 "screen"
ctx.globalCompositeOperation = "screen"


# 畫第一個圓，分成四個扇形區域
ctx.strokeStyle = 'black'
# 第一個圓的四個區域
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#2E8B57" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#C0392B"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#006400"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#F75000"  
ctx.fill()
ctx.stroke()

# 畫第二個圓，分成四個扇形區域
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "#4B0082"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "#556B2F" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "#FF8C00"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "#8B008B"  
ctx.fill()
ctx.stroke()

# 畫紅色矩形，分成四個三角形
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "#B8860B" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "#3E1C41" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "#008B8B"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "#006400" 
ctx.fill()
ctx.stroke()</pre>
</div>
<!-- 利用 Brython 繪圖 -->
<p>
<script type="text/python">
from browser import html
from browser import document as doc

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
 
# 畫兩個矩形 (紅色邊框)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.rect(200, 200, 200, 200)
ctx.stroke()
 
# 畫對角線 (藍色)
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()
 
# 畫兩個圓形 (黑色)
ctx.strokeStyle = 'black'
ctx.beginPath()
ctx.arc(200, 200, 141.4, 0, 2 * 3.14)
ctx.stroke()
ctx.beginPath()
ctx.arc(300, 300, 141.4, 0, 2 * 3.14)
ctx.stroke()
</script>
</p>
<p></p>
<!-- 引入 Brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 設置容器 -->
<div id="brython_div1"></div>
<!-- 利用 Brython 繪圖 -->
<script type="text/python">
        from browser import html
        from browser import document as doc
        import math

        # 設置畫布
        canvas = html.CANVAS(width=500, height=500)
        brython_div = doc["brython_div1"]
        brython_div <= canvas

        ctx = canvas.getContext("2d")
        ctx.lineWidth = 3

        # 畫對角線 (藍色)
        ctx.strokeStyle = 'blue'
        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(260, 260)
        ctx.stroke()

        # 設置混色模式為 "screen"
        ctx.globalCompositeOperation = "screen"

        # 畫第一個圓，分成四個扇形區域
        ctx.strokeStyle = 'black'
        # 第一個圓的四個區域
        ctx.beginPath()
        ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
        ctx.fillStyle = "#2E8B57" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
        ctx.fillStyle = "#C0392B"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
        ctx.fillStyle = "#006400"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
        ctx.fillStyle = "#F75000"  
        ctx.fill()
        ctx.stroke()

        # 畫第二個圓，分成四個扇形區域
        ctx.beginPath()
        ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
        ctx.fillStyle = "#4B0082"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
        ctx.fillStyle = "#556B2F" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
        ctx.fillStyle = "#FF8C00"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
        ctx.fillStyle = "#8B008B"  
        ctx.fill()
        ctx.stroke()

        # 畫紅色矩形，分成四個三角形
        ctx.strokeStyle = 'red'
        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(60, 260)
        ctx.lineTo(260, 260)
        ctx.fillStyle = "#B8860B" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(260, 60)
        ctx.lineTo(260, 260)
        ctx.fillStyle = "#3E1C41" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(160, 160)
        ctx.lineTo(360, 160)
        ctx.lineTo(360, 360)
        ctx.fillStyle = "#008B8B"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(160, 160)
        ctx.lineTo(160, 360)
        ctx.lineTo(360, 360)
        ctx.fillStyle = "#006400" 
        ctx.fill()
        ctx.stroke()

        # 開始掃描和著色
        scan_and_draw()
    
</script><h3>w14_ex</h3>
<p>(<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/131c3752c3cd25bb85f9d8788b6c9b4b/raw/26c0d9ff8f418d8f3c42cc5be8a1da6b3e84ce69/w14_ex">畫三個圓加顏色並且每次出來的顏色不一樣</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=600, height=600)
brython_div = doc["brython div1"]
brython_div &lt;= canvas
ctx = canvas.getContext("2d")

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
   
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
   
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
   
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
   
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
           
            if in_circle1 and in_circle2 and in_circle3:
                # 交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 只在圓1與圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle2 and in_circle3:
                # 只在圓2與圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1 and in_circle3:
                # 只在圓1與圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 三個圓心和半徑的設定
# 假設三個圓心分佈成等邊三角形的頂點，並設置它們的半徑
radius = 100  # 圓的半徑
x1, y1 = 150, 200  # 圓1 圓心
x2, y2 = 250, 200  # 圓2 圓心
x3, y3 = 200, 100  # 圓3 圓心

# 呼叫畫圓函式
draw_circles(x1, y1, radius, x2, y2, radius, x3, y3, radius)</pre>
<p><img alt="" height="490" src="/images/螢幕擷取畫面 2024-12-18 012917.png" width="566"/></p>
<h3>w15</h3>
<p>題目一: <a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/cbf6d755ae7b0aa58429649e917c8602/raw/070524aa2ce550ea26f1f413c1cda302963db98c/ex1.py">"從 1 累加到 100"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 計算從 1 加到 100 的總和
total = sum(range(1, 101))  # 使用 range(1, 101) 生成 1 到 100 的數列，並用 sum() 函數計算總和

# 印出計算結果
print(total)  # 輸出總和結果</pre>
<p></p>
<p>題目二: <a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/cbf6d755ae7b0aa58429649e917c8602/raw/8fc0fb468e5202d59943e803e1a4c27e6d49a6d6/ex2.py">"addto"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    total = 0
    for num in range(start, end + 1):
        total += num
        print(f"加上 {num} 後，總和為 {total}")
    return total

# 呼叫函式，計算從 1 加到 100 的總和
total = addto(1, 100)

# 最後印出總和
print(f"最終總和：{total}")</pre>
<p></p>
<p>題目三:<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/cbf6d755ae7b0aa58429649e917c8602/raw/ff67b228f501c96bc28cf3c7204517ea97d54cf7/ex3.py">"add_only_even" </a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    # 使用 range() 生成從 start 到 end 的數列，但只挑選偶數
    even_numbers = range(start + (start % 2), end + 1, 2)  # 調整起始點為偶數，並以步長 2 前進
    return sum(even_numbers)

# 呼叫函式，計算從 1 加到 100 的偶數總和
total = add_only_even(1, 100)

# 印出計算結果
print(total)  # 輸出偶數總和結果</pre>
<p></p>
<p>題目四:<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/cbf6d755ae7b0aa58429649e917c8602/raw/ff67b228f501c96bc28cf3c7204517ea97d54cf7/ex4.py">"<span>add_avoid_8"</span></a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    total = 0
    for num in range(start, end + 1):
        if '8' not in str(num):  # 檢查數字是否包含 "8"
            total += num
    return total

# 呼叫函式，計算從 1 加到 100 並避免數字包含 "8" 的總和
total = add_avoid_8(1, 100)

# 印出計算結果
print(total)  # 輸出避開 "8" 的總和結果</pre>
<p>練習:"<a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/cbf6d755ae7b0aa58429649e917c8602/raw/0cf8025700a9a9933ffff3f5317e15241f39c3ee/%25E7%25B7%25B4%25E7%25BF%2592.py">add_avoid_3_and_8</a>"</p>
<p></p>
<p>Canvas Example with Brython</p>
<!-- 引入 Brython 的庫 -->
<script src="https://gist.githubusercontent.com/41323152/6ad6c5f65bec710ae68562eda7f2801b/raw/6751466ba419b17088b27b4f9bbec2f9985a1cb5/hw2.py" type="text/javascript">
canvas {
            border: 1px solid black;
        }
    </style>
</head>
<body onload="brython()">
    <div id="brython_div1"></div>

    <!-- 這裡插入你的 Python 代碼 -->
    <script type="text/python">
        from browser import html
        from browser import document as doc
        import math

        # 設置畫布
        canvas = html.CANVAS(width=500, height=500)
        brython_div = doc["brython_div1"]
        brython_div <= canvas

        ctx = canvas.getContext("2d")
        ctx.lineWidth = 3

        # 畫對角線 (藍色)
        ctx.strokeStyle = 'blue'
        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(260, 260)
        ctx.stroke()

        # 設置混色模式為 "screen"
        ctx.globalCompositeOperation = "screen"

        # 畫第一個圓，分成四個扇形區域
        ctx.strokeStyle = 'black'
        # 第一個圓的四個區域
        ctx.beginPath()
        ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
        ctx.fillStyle = "#2E8B57" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
        ctx.fillStyle = "#C0392B"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
        ctx.fillStyle = "#006400"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
        ctx.fillStyle = "#F75000"  
        ctx.fill()
        ctx.stroke()

        # 畫第二個圓，分成四個扇形區域
        ctx.beginPath()
        ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
        ctx.fillStyle = "#4B0082"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
        ctx.fillStyle = "#556B2F" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
        ctx.fillStyle = "#FF8C00"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
        ctx.fillStyle = "#8B008B"  
        ctx.fill()
        ctx.stroke()

        # 畫紅色矩形，分成四個三角形
        ctx.strokeStyle = 'red'
        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(60, 260)
        ctx.lineTo(260, 260)
        ctx.fillStyle = "#B8860B" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(60, 60)
        ctx.lineTo(260, 60)
        ctx.lineTo(260, 260)
        ctx.fillStyle = "#3E1C41" 
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(160, 160)
        ctx.lineTo(360, 160)
        ctx.lineTo(360, 360)
        ctx.fillStyle = "#008B8B"  
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.moveTo(160, 160)
        ctx.lineTo(160, 360)
        ctx.lineTo(360, 360)
        ctx.fillStyle = "#006400" 
        ctx.fill()
        ctx.stroke()

        # 扫描和绘制函数定义
        def scan_and_draw():
            print("Scanning and drawing...")
            # 可以加入掃描及繪圖邏輯
</script>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p></p>
<h3>w16_exam1</h3>
<p><span>以</span><span>自己的學號最後四碼</span><span>作為繪圖的座標原點, (例如:</span></p>
<p><span>若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸。</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/892454c43bb6ff70b924336fe4a25fdc/raw/c1a9e9360e55c4d449da93f20f9f2327573fe32a/w16_exam1.py">"圖形''</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math

# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=500, height=300)
        document &lt;= canvas

# 繪製多邊形（傳入中心座標、邊數和半徑）
def draw_polygon(ctx, center_x, center_y, sides, radius, color):
    ctx.beginPath()
    for i in range(sides):
        angle = i * (2 * math.pi / sides)
        x = center_x + radius * math.cos(angle)
        y = center_y + radius * math.sin(angle)
        if i == 0:
            ctx.moveTo(x, y)
        else:
            ctx.lineTo(x, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製矩形
def draw_rectangle(ctx, x, y, width, height, color):
    ctx.beginPath()
    ctx.rect(x, y, width, height)
    ctx.fillStyle = color
    ctx.fill()

# 初始化畫布
setup_canvas()

# 設定 canvas 和繪圖上下文
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# 設定原點 (31, 52)
origin_x, origin_y = 31, 52

# 繪製坐標軸
def draw_axes():
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)
    ctx.lineTo(500, origin_y)  # X 軸
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.stroke()

    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)
    ctx.lineTo(origin_x, 300)  # Y 軸
    ctx.stroke()

    # 標註原點
    ctx.font = "12px Arial"
    ctx.fillStyle = "black"
    ctx.fillText("(31, 52)", origin_x + 5, origin_y - 5)

# 繪製圖形
def draw_shapes():
    # 繪製六邊形 (橙色)
    draw_polygon(ctx, origin_x + 68, origin_y + 59, 6, 30, "orange")

    # 繪製菱形 (青色)
    ctx.beginPath()
    ctx.moveTo(origin_x + 128, origin_y + 29)
    ctx.lineTo(origin_x + 148, origin_y + 59)
    ctx.lineTo(origin_x + 128, origin_y + 89)
    ctx.lineTo(origin_x + 108, origin_y + 59)
    ctx.closePath()
    ctx.fillStyle = "teal"
    ctx.fill()

    # 繪製三角形 (藍色)
    ctx.beginPath()
    ctx.moveTo(origin_x + 133, origin_y + 89)
    ctx.lineTo(origin_x + 173, origin_y + 89)
    ctx.lineTo(origin_x + 153, origin_y + 59)
    ctx.closePath()
    ctx.fillStyle = "blue"
    ctx.fill()

    # 繪製圓形 (粉紅色)
    ctx.beginPath()
    ctx.arc(origin_x + 198, origin_y + 59, 30, 0, 2 * math.pi)
    ctx.fillStyle = "pink"
    ctx.fill()

    # 繪製正方形 (黃色)
    draw_rectangle(ctx, origin_x + 233, origin_y + 34, 50, 50, "yellow")

    # 繪製矩形 (藍色)
    draw_rectangle(ctx, origin_x + 288, origin_y + 49, 60, 20, "blue")

# 繪製坐標軸和圖形
draw_axes()
draw_shapes()
</pre>
<p></p>
<p></p>
<p><canvas height="300" id="my_canvas" width="500"></canvas></p>
<p>
<script type="application/javascript">
// 初始化 HTML，確保 canvas 元素存在
        function setupCanvas() {
            const canvas = document.querySelector("#my_canvas");
            if (!canvas) {
                alert("Canvas 元素未找到！");
                return null;
            }
            return canvas.getContext("2d");
        }

        // 繪製多邊形（傳入中心座標、邊數和半徑）
        function drawPolygon(ctx, centerX, centerY, sides, radius, color) {
            ctx.beginPath();
            for (let i = 0; i < sides; i++) {
                const angle = i * (2 * Math.PI / sides);
                const x = centerX + radius * Math.cos(angle);
                const y = centerY + radius * Math.sin(angle);
                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }
            }
            ctx.closePath();
            ctx.fillStyle = color;
            ctx.fill();
        }

        // 繪製矩形
        function drawRectangle(ctx, x, y, width, height, color) {
            ctx.beginPath();
            ctx.rect(x, y, width, height);
            ctx.fillStyle = color;
            ctx.fill();
        }

        // 設定原點 (31, 52)
        const originX = 31;
        const originY = 52;

        // 繪製坐標軸
        function drawAxes(ctx) {
            ctx.beginPath();
            ctx.moveTo(originX, originY);
            ctx.lineTo(500, originY); // X 軸
            ctx.strokeStyle = "black";
            ctx.lineWidth = 2;
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(originX, originY);
            ctx.lineTo(originX, 300); // Y 軸
            ctx.stroke();

            // 標註原點
            ctx.font = "12px Arial";
            ctx.fillStyle = "black";
            ctx.fillText("(31, 52)", originX + 5, originY - 5);
        }

        // 繪製圖形
        function drawShapes(ctx) {
            // 繪製六邊形 (橙色)
            drawPolygon(ctx, originX + 68, originY + 59, 6, 30, "orange");

            // 繪製菱形 (青色)
            ctx.beginPath();
            ctx.moveTo(originX + 128, originY + 29);
            ctx.lineTo(originX + 148, originY + 59);
            ctx.lineTo(originX + 128, originY + 89);
            ctx.lineTo(originX + 108, originY + 59);
            ctx.closePath();
            ctx.fillStyle = "teal";
            ctx.fill();

            // 繪製三角形 (藍色)
            ctx.beginPath();
            ctx.moveTo(originX + 133, originY + 89);
            ctx.lineTo(originX + 173, originY + 89);
            ctx.lineTo(originX + 153, originY + 59);
            ctx.closePath();
            ctx.fillStyle = "blue";
            ctx.fill();

            // 繪製圓形 (粉紅色)
            ctx.beginPath();
            ctx.arc(originX + 198, originY + 59, 30, 0, 2 * Math.PI);
            ctx.fillStyle = "pink";
            ctx.fill();

            // 繪製正方形 (黃色)
            drawRectangle(ctx, originX + 233, originY + 34, 50, 50, "yellow");

            // 繪製矩形 (藍色)
            drawRectangle(ctx, originX + 288, originY + 49, 60, 20, "blue");
        }

        // 主執行流程
        const ctx = setupCanvas();
        if (ctx) {
            drawAxes(ctx);
            drawShapes(ctx);
        }
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7DWcm6T6wSE" width="560"></iframe></p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p></p>
<p></p>
<h3>w16_exam2</h3>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/892454c43bb6ff70b924336fe4a25fdc/raw/c3fe8d0cffef35bd206509c772eec4ffe539ae8a/w16_exam2.py">迷宮程式</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 設定迷宮畫布大小
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 52)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 52)", 35, 42)

# 定義藍色線條的屬性
ctx.strokeStyle = "blue"
ctx.lineWidth = 2

# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 52

# 迷宮的線條座標，這些可以在列表中定義，便於後期維護
maze_lines = [
    # 每個元素為一組座標對，表示從哪個點到哪個點
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]

# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])

# 開始繪製迷宮
ctx.beginPath()

# 遍歷迷宮的每條線，繪製出來
for start, end in maze_lines:
    draw_line(start, end)

# 結束繪製
ctx.stroke()</pre>
<!-- 引入 Brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
</p>
<!-- 設置容器 -->
<div id="brython div1"></div>
<!-- 利用 Brython 繪圖 -->
<p>
<script type="text/python">
from browser import html
from browser import document as doc

 

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 標示左上方點座標 (31, 52)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 52)", 35, 42)

# 定義藍色線條的屬性
ctx.strokeStyle = "blue"
ctx.lineWidth = 2

# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 52

# 迷宮的線條座標，這些可以在列表中定義，便於後期維護
maze_lines = [
    # 每個元素為一組座標對，表示從哪個點到哪個點
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]

# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])

# 開始繪製迷宮
ctx.beginPath()

# 遍歷迷宮的每條線，繪製出來
for start, end in maze_lines:
    draw_line(start, end)

# 結束繪製
ctx.stroke()
</script>
</p>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Vidz63XrnDo" width="560"></iframe>    </p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<p></p>
<p></p>
<h3>w16_exam3</h3>
<p><span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-41323152/content/Brython.html?src=https://gist.githubusercontent.com/41323152/892454c43bb6ff70b924336fe4a25fdc/raw/b66d9befa959fd5d37ed377527e17ebbfddbff83/w16_exam3.py">迷宮路徑解答</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc


# 設定迷宮畫布大小
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (31, 52)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 52)", 35, 42)

# 定義藍色線條的屬性
ctx.strokeStyle = "blue"
ctx.lineWidth = 2

# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 52

# 迷宮的線條座標
maze_lines = [
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]

# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])

# 繪製迷宮
ctx.beginPath()
for start, end in maze_lines:
    draw_line(start, end)
ctx.stroke()

# 定義紅色路徑屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 3

# 解答路徑
path_solution = [
    (100, 0),    
    (100, 20),   
    (180, 20),  
    (180, 100),  
    (140, 100), 
    (140, 60), 
    (100, 60),
    (100,100),
    (25,100),
    (25,180),
    (65,180),
    (65,140),
    (140,140),
    (140,180),
    (100,180),
    (100,200),
]

# 繪製紅色路徑
ctx.beginPath()
for i in range(len(path_solution) - 1):
    start = path_solution[i]
    end = path_solution[i + 1]
    draw_line(start, end)
ctx.stroke()</pre>
<p></p>
<!-- 引入 Brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload = function() {
    brython({debug:1, pythonpath:['/static/', '../../downloads/py/']});
}
</script>
</p>
<!-- 設置容器 -->
<div id="brython div1"></div>
<!-- 利用 Brython 繪圖 -->
<p>
<script type="text/python">
from browser import html
from browser import document as doc

 

# 利用 HTML 建立 canvas 並定義特性
canvas = html.CANVAS(width=300, height=300)
brython_div = doc["brython div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 標示左上方點座標 (31, 52)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(31, 52)", 35, 42)
 
# 定義藍色線條的屬性
ctx.strokeStyle = "blue"
ctx.lineWidth = 2
 
# 設定迷宮起點的偏移量
offset_x, offset_y = 31, 52
 
# 迷宮的線條座標
maze_lines = [
    ((0, 0), (86, 0)),
    ((0, 0), (0, 200)),
    ((120, 0), (200, 0)),
    ((200, 0), (200, 200)),
    ((120, 200), (200, 200)),
    ((0, 200), (86, 200)),
    ((86, 157), (86, 200)),
    ((86, 157), (126, 157)),
    ((160, 120), (160, 200)),
    ((160, 120), (50, 120)),
    ((50, 120), (50, 163)),
    ((126, 80), (126, 120)),
    ((0, 80), (86, 80)),
    ((86, 40), (86, 80)),
    ((40, 40), (160, 40)),
    ((160, 40), (160, 83)),
]
 
# 使用輔助函數來簡化畫線的過程
def draw_line(start, end):
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
 
# 繪製迷宮
ctx.beginPath()
for start, end in maze_lines:
    draw_line(start, end)
ctx.stroke()
 
# 定義紅色路徑屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 3
 
# 解答路徑
path_solution = [
    (100, 0),    
    (100, 20),   
    (180, 20),  
    (180, 100),  
    (140, 100), 
    (140, 60), 
    (100, 60),
    (100,100),
    (25,100),
    (25,180),
    (65,180),
    (65,140),
    (140,140),
    (140,180),
    (100,180),
    (100,200),
]
 
# 繪製紅色路徑
ctx.beginPath()
for i in range(len(path_solution) - 1):
    start = path_solution[i]
    end = path_solution[i + 1]
    draw_line(start, end)
ctx.stroke()
</script>
</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vHxk0_PAmtI" width="560"></iframe></p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>